apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'eclipse'

sourceCompatibility = 1.8
targetCompatibility = 1.8
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

version = file('version').text
ext.tf_vendor = 'Triniforce.com'

// Project configuration is used for Maven  deploy:
ext.vgroupId = 'com.triniforce'
ext.GITHUB_OWNER = "projectkaiser";
ext.GITHUB_REPOSITORY = "tf-server-toolkit";
ext.vartifactId = 'tf-server-toolkit'


// Get dynamic environment settings
apply from: 'config.gradle'

ext.testFolderDir = new File(buildDir, 'test')


defaultTasks 'clean', 'ide'

repositories {
	maven {
		url MavenResolveUrl
		credentials(PasswordCredentials) {
			username = MavenUsername
			password = MavenPassword
		}
	}
}

processResources {
	from('src') {
		include '**/*.properties'
		include '**/*.wiki'
		include '**/*.bsh'
		include '**/*.htm'
	}
	from('test') {
		include '**/*.jar'
		include '**/*.bs'
		include '**/*.txt'
		include '**/*.properties'
		include '**/*.soap'
		include '**/*.wiki'
		include '**/*.FDB'
	
	}
}

configurations {
	providedCompile
}

dependencies {

	compile(group: 'commons-pool', name: 'commons-pool', version: '1.5.6')
//	compile 'commons-dbcp:commons-dbcp:1.2.2' // (latest: 1.4)
	compile 'commons-dbcp:commons-dbcp:1.4' // (latest: 1.4)
	compile 'commons-logging:commons-logging:1.1.1'
	compile 'org.apache.commons:commons-lang3:3.8'
	

	compile(group: 'log4j', name: 'log4j', version: '1.2.16')
	compile(group: 'org.beanshell', name: 'bsh', version: '2.0b4')
	compile(group: 'org.dbunit', name: 'dbunit', version: '2.4.9'){
		 exclude group: 'junit', module: 'junit'
	}
	compile(group: 'org.slf4j', name: 'slf4j-api', version: '1.6.1')
	compile(group: 'net.sf.sojo', name: 'sojo', version: '1.0.0') //NOTE: this is a copy from tflib. Modern versions is not comatible with Tomcat

	testCompile(group: 'com.h2database', name: 'h2', version: '1.3.155')
	testCompile(group: 'org.apache.derby', name: 'derby', version: '10.8.1.2')

	compile(group: 'joda-time', name: 'joda-time', version: '2.1')
	compile 'com.googlecode.json-simple:json-simple:1.1.1'

	compile 'javax.mail:mail:1.4.7'
	compile 'org.apache.poi:poi:3.10.1'

	compile 'org.apache.httpcomponents:httpclient:4.3.6'
	compile 'org.apache.commons:commons-text:1.8'
	compile 'commons-io:commons-io:2.4'

	testCompile(group: 'org.jmock', name: 'jmock', version: '2.5.1')
	testCompile 'net.sourceforge.jtds:jtds:1.2.4'
	testCompile 'com.microsoft.sqlserver:mssql-jdbc:6.1.0.jre7'
    	testCompile 'org.firebirdsql.jdbc:jaybird-jdk16:2.2.4'
	testCompile(group: 'junit', name: 'junit', version: '3.8.2', force: true)
	testCompile(group: 'mysql', name: 'mysql-connector-java', version: '5.1.16')
	testCompile 'com.google.guava:guava:19.0-rc2'
	testCompile 'net.engio:mbassador:1.2.4'		
	testCompile 'com.icegreen:greenmail:1.3'
	testCompile 'org.slf4j:slf4j-nop:1.7.14'
		
	testCompile "org.mockito:mockito-core:1.+"
	// Jetty
	testCompile 'org.eclipse.jetty:jetty-webapp:9.2.0.RC0'
	testCompile 'org.eclipse.jetty:jetty-plus:9.2.0.RC0'
	testCompile 'org.eclipse.jetty:jetty-jndi:9.2.0.RC0'
	testCompile 'javax.servlet.jsp:jsp-api:2.1'
	testCompile( group: 'xerces', name: 'xercesImpl', version: '2.11.0')
	testCompile 'com.graphql-java:graphql-java:11.0'
	testCompile(group: 'com.google.code.gson', name: 'gson', version: '2.8.6')


	providedCompile 'javax.servlet:javax.servlet-api:3.0.1'
}

sourceSets.main.compileClasspath += configurations.providedCompile
sourceSets.test.compileClasspath += configurations.providedCompile
sourceSets.test.runtimeClasspath += configurations.providedCompile

sourceSets {
	main.java.srcDirs = ['src']
	test.java.srcDirs = ['test']
	in.java.srcDirs = ['investigation']

}


tasks.eclipse.dependsOn(cleanEclipse)
eclipse {
	classpath {
		downloadJavadoc = true
		plusConfigurations += [configurations.providedCompile]
	}
	jdt.file.withProperties{
		it['org.eclipse.jdt.core.compiler.problem.rawTypeReference']='ignore'
		it['org.eclipse.jdt.core.compiler.problem.uncheckedTypeOperation']='ignore'
	}
}

//eclipseJdt << {
//	file('.settings/org.eclipse.core.resources.prefs').write(
//	  'eclipse.preferences.version=1\n' +
//	  'encoding/<project>=UTF-8\n'
//	)
//}

task ide(dependsOn: tasks.eclipse) {
	group = 'IDE'
	description = 'preparing for work in the development environment'
}

task sourcesJar(type: Jar) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

artifacts {
	archives sourcesJar
}

tasks.withType(PublishToMavenRepository) { it.dependsOn test }

publishing{

	repositories {
		maven {
			name = "GitHubPackages"
			url = 'https://maven.pkg.github.com/'+GITHUB_OWNER+'/'+GITHUB_REPOSITORY
			credentials {
				username = GithubRegistryUsername
				password = GithubRegistryToken
			}
		}
	}

	publications {
		gpr(MavenPublication) {
			groupId = vgroupId
			artifactId = vartifactId
			version = getNextVersion(requestLastRegistryVersion())

			from(components.java)
		}
	}
}

task jar_lib(type: Copy, dependsOn:[jar]){
	from "${jar.destinationDir}/${jar.archiveName}"
	into "$System.env.TF_LIB_HOME/srvdist"
	rename { String fileName -> 'tf-server-toolkit.jar' }
}

jar_lib.doFirst{
	def envName ="TF_LIB_HOME"
	def env = System.env[envName]
	if (null == env || env.length() == 0){
		throw new StopExecutionException("Variable $envName must point to TF_LIB HOME")
	}
}

jar {
	manifest {
		attributes(
			"Specification-Title": project.name,
			"Specification-Version": version,
			"Specification-Vendor": tf_vendor,
			"Implementation-Title": project.name,
			"Implementation-Version": "$version (${new Date().format('yyyy-MM-dd')})",
			"Implementation-Vendor": tf_vendor
		)
	}
}

task prepareTestFolder {
	outputs.dir testFolderDir
	doLast {
		delete testFolderDir
		mkdir testFolderDir
		new File(testFolderDir, 'log4j.properties').write(
			'log4j.rootLogger=trace, file\n' +
			'log4j.appender.file=org.apache.log4j.RollingFileAppender\n' +
			'log4j.appender.file.File=' + new File(testFolderDir, 'messages.log').absolutePath.replace('\\', '/') + '\n' +
			'log4j.appender.file.MaxFileSize=8MB\n' +
			'log4j.appender.file.MaxBackupIndex=10\n' +
			'log4j.appender.file.layout=org.apache.log4j.PatternLayout\n' +
			'log4j.appender.file.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} %5p %t %c{6}:%L - %m %l %n\n' +
			'log4j.logger.com.triniforce.db.dml.StmtContainer=OFF\n'
		)
		new File(testFolderDir, 'test.properties').write(
			'url=jdbc:h2:mem:db\n' +
			'class=org.h2.Driver\n'+
			'testSeqFile=seq.txt'
		)
	}
}

test {
	dependsOn prepareTestFolder
	doFirst {
		environment.put('TF_SERVER_TOOLKIT_TEST_FOLDER', testFolderDir)
	}

	minHeapSize = "128m"
	maxHeapSize = "256m"
}


//task outputDirs << { sourceSets.test.java.srcDirs.each{f -> println(f)}}

//war {
//	from 'war'
//}

import groovy.json.JsonOutput;
import groovy.json.JsonSlurper;

String requestLastRegistryVersion(){
	def gqlQuery = """
query{repository(owner:"${GITHUB_OWNER}", name:"${GITHUB_REPOSITORY}"){
  id
  registryPackages(last: 100) {
    edges {
      node {
        id
        latestVersion {
          id
          version
        }
      }
    }
  }
}}
""";
	def baseUrl = new URL('https://api.github.com/graphql')
	def connection = baseUrl.openConnection()
	connection.with {
		doOutput = true
		doInput = true
		requestMethod = 'POST'
		def basicAuth = 'token ' + GithubRegistryToken
		setRequestProperty("Authorization", basicAuth);
		outputStream.withWriter { writer ->
			writer << JsonOutput.toJson(["query": gqlQuery])
		}
		def strResp = content.text;
		def gqlResponse =  new JsonSlurper().parseText(strResp);
		def edges = gqlResponse.data.repository.registryPackages.edges;
		def latestVersion = edges[0].node.latestVersion.version;
		for(int i=1; i < edges.size(); i++){
			println "checking: " + edges[i].node.latestVersion.version;		
			if(edges[i].node.latestVersion.version.startsWith(version)){
				latestVersion = edges[i].node.latestVersion.version;
				break;
			}
		}        
		return latestVersion;
	}

}

String getNextVersion(String registryVersion){
	def matcher = registryVersion =~ /^(\d+\.\d+)\.(\d{1,4})$/;

	assert matcher.find();
	def major = matcher[0][1];
	def minor = matcher[0][2];
	def nextVersion;
	if(version.startsWith(major, 0))
		nextVersion = major + '.'+((minor as int) + 1);
	else
		nextVersion = version + ".0";
	return nextVersion;
}

task showNextPackageVersion(){
	println "next version : " + getNextVersion(requestLastRegistryVersion());

}

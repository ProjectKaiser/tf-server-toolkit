ext.tf_version = '41.0'
ext.tf_release = false
ext.tf_vendor = 'Triniforce.com'

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'eclipse'

sourceCompatibility = 1.6
targetCompatibility = 1.6
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

// Project configuration is used for Maven deploy:
group = 'com.triniforce.tf-server-toolkit'

//version = "8.0${release?'':'-SNAPSHOT'}"
version = tf_version + (tf_release ? '' : '-SNAPSHOT')


// Get dynamic environment settings
apply from: 'config.gradle'

defaultTasks 'clean', 'ide'

repositories {
	maven {
		url MavenResolveUrl
		credentials {
			username = MavenUsername
			password = MavenPassword
		}
	}
}

processResources {
	from('src') {
		include '**/*.properties'
		include '**/*.wiki'
	}
}

configurations {
	providedCompile
}

dependencies {

	compile(group: 'commons-pool', name: 'commons-pool', version: '1.5.6')
//	compile 'commons-dbcp:commons-dbcp:1.2.2' // (latest: 1.4)
	compile 'commons-dbcp:commons-dbcp:1.4' // (latest: 1.4)
	compile 'commons-logging:commons-logging:1.1.1'

	compile(group: 'log4j', name: 'log4j', version: '1.2.16')
	compile(group: 'net.sourceforge.jtds', name: 'jtds', version: '1.2.4')
	compile(group: 'org.beanshell', name: 'bsh', version: '2.0b4')
	compile(group: 'org.dbunit', name: 'dbunit', version: '2.4.9')
	compile(group: 'org.slf4j', name: 'slf4j-api', version: '1.6.1')
	compile(group: 'net.sf.sojo', name: 'sojo', version: '1.0.0') //NOTE: this is a copy from tflib

	compile(group: 'com.h2database', name: 'h2', version: '1.3.155')
	compile(group: 'org.apache.derby', name: 'derby', version: '10.8.1.2')
	compile(group: 'org.jmock', name: 'jmock', version: '2.5.1')

	compile(group: 'joda-time', name: 'joda-time', version: '2.1')
	compile 'com.googlecode.json-simple:json-simple:1.1.1'

	compile 'javax.mail:mail:1.4.7'
	compile 'org.apache.poi:poi:3.10.1'

	compile 'org.apache.httpcomponents:httpclient:4.3.6'

	testCompile 'org.firebirdsql.jdbc:jaybird-jdk16:2.2.4'
	testCompile(group: 'junit', name: 'junit', version: '3.8.2', force: true)
	testCompile(group: 'mysql', name: 'mysql-connector-java', version: '5.1.16')

	testCompile 'com.icegreen:greenmail:1.3'

	providedCompile 'javax.servlet:javax.servlet-api:3.0.1'
}

sourceSets.main.compileClasspath += configurations.providedCompile
sourceSets.test.compileClasspath += configurations.providedCompile
sourceSets.test.runtimeClasspath += configurations.providedCompile

sourceSets {
	main.java.srcDirs = ['src']
	test.java.srcDirs = ['test', 'investigation']
}

tasks.eclipse.enabled = false
tasks.cleanEclipse.enabled = false
tasks.eclipseJdt.enabled = false
tasks.cleanEclipseJdt.enabled = false

tasks.eclipse.dependsOn(cleanEclipse)
eclipse {
	classpath {
		downloadJavadoc = true
		plusConfigurations += [configurations.providedCompile]
	}
}

task ide(dependsOn: tasks.eclipse) {
	group = 'IDE'
	description = 'preparing for work in the development environment'
}

task sourcesJar(type: Jar) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

artifacts {
	archives sourcesJar
}

uploadArchives {
	repositories.mavenDeployer {
		uniqueVersion = false
		repository(url: MavenPublishUrl) {
			authentication(userName: MavenPublishUsername, password: MavenPublishPassword)
		}
		snapshotRepository(url: MavenPublishSnapshotUrl) {
			authentication(userName: MavenPublishUsername, password: MavenPublishPassword)
		}
	}
}

task jar_lib(type: Copy, dependsOn:[jar]){
	from "${jar.destinationDir}/${jar.archiveName}"
	into "../tflib/srvdist"
	rename { String fileName -> 'tf-server-toolkit.jar' }
}

/*
task printEnv{
	props:{
			System.out.println("\n\n\n****************** PROPERTIES *********************************\n\n\n");
			Properties props = System.getProperties();
			List names = new ArrayList();
			for(Object name:props.keySet()){
				names.add(name);
			}
			Collections.sort(names);
			for(Object name: names){
				println(name + ": " + props.getProperty((String) name));
			}
	}
	env:{
		System.out.println("\n\n\n****************** ENVIRONMENT *********************************\n\n\n");

		Map<String, String> variables = System.getenv();
		List names = new ArrayList();
		names.addAll(variables.keySet());
		Collections.sort(names);

		for (String name: names){
			System.out.println(name + "=" + variables.get(name));
		}
	}

}*/

jar {
	manifest {
		attributes(
			"Specification-Title": project.name,
			"Specification-Version": tf_version,
			"Specification-Vendor": tf_vendor,
			"Implementation-Title": project.name,
			"Implementation-Version": tf_version,
			"Implementation-Vendor": tf_vendor
		)
	}
}
